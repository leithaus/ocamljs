--- buffer.ml.orig	2010-08-18 14:54:59.000000000 -0400
+++ buffer.ml	2010-08-19 15:44:05.000000000 -0400
@@ -1,3 +1,26 @@
+(*
+ * This file is part of ocamljs, OCaml to Javascript compiler
+ * Copyright (C) 2007-9 Skydeck, Inc
+ * Copyright (C) 2010 Jake Donham
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+ * MA 02111-1307, USA
+ *)
+
+open Ocamljs.Inline
+
 (***********************************************************************)
 (*                                                                     *)
 (*                           Objective Caml                            *)
@@ -15,99 +38,81 @@
 
 (* Extensible buffers *)
 
-type t =
- {mutable buffer : string;
-  mutable position : int;
-  mutable length : int;
-  initial_buffer : string}
+type a
 
-let create n =
- let n = if n < 1 then 1 else n in
- let n = if n > Sys.max_string_length then Sys.max_string_length else n in
- let s = String.create n in
- {buffer = s; position = 0; length = n; initial_buffer = s}
+type t = {
+  array : a;
+  mutable string : string option;
+  mutable length : int;
+}
 
-let contents b = String.sub b.buffer 0 b.position
+let create n = {
+  array = << new Array() >>;
+  string = None;
+  length = 0;
+}
+
+let contents b =
+  match b.string with
+    | None -> let s = << $b.array$.join('') >> in b.string <- Some s; s
+    | Some s -> s
 
 let sub b ofs len =
-  if ofs < 0 || len < 0 || ofs > b.position - len
-  then invalid_arg "Buffer.sub"
-  else begin
-    let r = String.create len in
-    String.blit b.buffer ofs r 0 len;
-    r
-  end
-;;
+  if ofs < 0 || len < 0 || ofs > b.length - len
+  then invalid_arg "Buffer.sub";
+  let s = contents b in
+  << $s$.substring($ofs$, $ofs$ + $len$) >>
 
 let blit src srcoff dst dstoff len =
+  failwith "unimplemented" (* XXX *)
+(*
   if len < 0 || srcoff < 0 || srcoff > src.position - len
              || dstoff < 0 || dstoff > (String.length dst) - len
   then invalid_arg "Buffer.blit"
   else
     String.blit src.buffer srcoff dst dstoff len
 ;;
+*)
 
 let nth b ofs =
-  if ofs < 0 || ofs >= b.position then
-   invalid_arg "Buffer.nth"
-  else String.get b.buffer ofs
-;;
-
-let length b = b.position
-
-let clear b = b.position <- 0
+  if ofs < 0 || ofs >= b.length
+  then invalid_arg "Buffer.nth";
+  let s = contents b in
+  << $s$.charCodeAt($ofs$) >>
+
+let length b = b.length
+
+let clear b =
+  b.length <- 0;
+  <:stmt< $b.array$.length = 0; >>
 
-let reset b =
-  b.position <- 0; b.buffer <- b.initial_buffer;
-  b.length <- String.length b.buffer
-
-let resize b more =
-  let len = b.length in
-  let new_len = ref len in
-  while b.position + more > !new_len do new_len := 2 * !new_len done;
-  if !new_len > Sys.max_string_length then begin
-    if b.position + more <= Sys.max_string_length
-    then new_len := Sys.max_string_length
-    else failwith "Buffer.add: cannot grow buffer"
-  end;
-  let new_buffer = String.create !new_len in
-  String.blit b.buffer 0 new_buffer 0 b.position;
-  b.buffer <- new_buffer;
-  b.length <- !new_len
+let reset = clear
 
 let add_char b c =
-  let pos = b.position in
-  if pos >= b.length then resize b 1;
-  b.buffer.[pos] <- c;
-  b.position <- pos + 1
+  b.string <- None;
+  b.length <- b.length + 1;
+  <:stmt< $b.array$.push(String.fromCharCode($c$)); >>
 
 let add_substring b s offset len =
   if offset < 0 || len < 0 || offset > String.length s - len
   then invalid_arg "Buffer.add_substring";
-  let new_position = b.position + len in
-  if new_position > b.length then resize b len;
-  String.blit s offset b.buffer b.position len;
-  b.position <- new_position
+  b.string <- None;
+  b.length <- b.length + len;
+  <:stmt< $b.array$.push($s$.substring($offset$, $offset$ + $len$)); >>
 
 let add_string b s =
-  let len = String.length s in
-  let new_position = b.position + len in
-  if new_position > b.length then resize b len;
-  String.blit s 0 b.buffer b.position len;
-  b.position <- new_position
+  b.string <- None;
+  b.length <- b.length + String.length s;
+  <:stmt< $b.array$.push($s$); >>
 
 let add_buffer b bs =
-  add_substring b bs.buffer 0 bs.position
+  add_string b (contents bs)
 
 let add_channel b ic len =
-  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)
-    invalid_arg "Buffer.add_channel";
-  if b.position + len > b.length then resize b len;
-  really_input ic b.buffer b.position len;
-  b.position <- b.position + len
+  failwith "unsupported"
 
 let output_buffer oc b =
-  output oc b.buffer 0 b.position
+  failwith "unsupported"
 
 let closing = function
   | '(' -> ')'
